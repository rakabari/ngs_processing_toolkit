# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_interop_table
else:
    import _py_interop_table

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_interop_table.delete_SwigPyIterator

    def value(self):
        return _py_interop_table.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_interop_table.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_interop_table.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_interop_table.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_interop_table.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_interop_table.SwigPyIterator_copy(self)

    def next(self):
        return _py_interop_table.SwigPyIterator_next(self)

    def __next__(self):
        return _py_interop_table.SwigPyIterator___next__(self)

    def previous(self):
        return _py_interop_table.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_interop_table.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_interop_table.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_interop_table.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_interop_table.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_interop_table.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_interop_table.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_interop_table.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py_interop_table:
_py_interop_table.SwigPyIterator_swigregister(SwigPyIterator)

import interop.py_interop_run
import interop.py_interop_metrics
import interop.py_interop_run_metrics
import interop.py_interop_comm
class map_id_offset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_table.map_id_offset___nonzero__(self)

    def __bool__(self):
        return _py_interop_table.map_id_offset___bool__(self)

    def __len__(self):
        return _py_interop_table.map_id_offset___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _py_interop_table.map_id_offset___getitem__(self, key)

    def __delitem__(self, key):
        return _py_interop_table.map_id_offset___delitem__(self, key)

    def has_key(self, key):
        return _py_interop_table.map_id_offset_has_key(self, key)

    def keys(self):
        return _py_interop_table.map_id_offset_keys(self)

    def values(self):
        return _py_interop_table.map_id_offset_values(self)

    def items(self):
        return _py_interop_table.map_id_offset_items(self)

    def __contains__(self, key):
        return _py_interop_table.map_id_offset___contains__(self, key)

    def key_iterator(self):
        return _py_interop_table.map_id_offset_key_iterator(self)

    def value_iterator(self):
        return _py_interop_table.map_id_offset_value_iterator(self)

    def __setitem__(self, *args):
        return _py_interop_table.map_id_offset___setitem__(self, *args)

    def asdict(self):
        return _py_interop_table.map_id_offset_asdict(self)

    def __init__(self, *args):
        _py_interop_table.map_id_offset_swiginit(self, _py_interop_table.new_map_id_offset(*args))

    def empty(self):
        return _py_interop_table.map_id_offset_empty(self)

    def size(self):
        return _py_interop_table.map_id_offset_size(self)

    def swap(self, v):
        return _py_interop_table.map_id_offset_swap(self, v)

    def rbegin(self):
        return _py_interop_table.map_id_offset_rbegin(self)

    def rend(self):
        return _py_interop_table.map_id_offset_rend(self)

    def clear(self):
        return _py_interop_table.map_id_offset_clear(self)

    def get_allocator(self):
        return _py_interop_table.map_id_offset_get_allocator(self)

    def count(self, x):
        return _py_interop_table.map_id_offset_count(self, x)

    def erase(self, *args):
        return _py_interop_table.map_id_offset_erase(self, *args)

    def find(self, x):
        return _py_interop_table.map_id_offset_find(self, x)

    def lower_bound(self, x):
        return _py_interop_table.map_id_offset_lower_bound(self, x)

    def upper_bound(self, x):
        return _py_interop_table.map_id_offset_upper_bound(self, x)
    __swig_destroy__ = _py_interop_table.delete_map_id_offset

# Register map_id_offset in _py_interop_table:
_py_interop_table.map_id_offset_swigregister(map_id_offset)

LaneColumn = _py_interop_table.LaneColumn
TileColumn = _py_interop_table.TileColumn
CycleColumn = _py_interop_table.CycleColumn
ReadColumn = _py_interop_table.ReadColumn
CycleWithinReadColumn = _py_interop_table.CycleWithinReadColumn
DensityKPermm2Column = _py_interop_table.DensityKPermm2Column
DensityPfKPermm2Column = _py_interop_table.DensityPfKPermm2Column
ClusterCountKColumn = _py_interop_table.ClusterCountKColumn
ClusterCountPfKColumn = _py_interop_table.ClusterCountPfKColumn
PercentPassFilterColumn = _py_interop_table.PercentPassFilterColumn
PercentAlignedColumn = _py_interop_table.PercentAlignedColumn
LegacyPhasingRateColumn = _py_interop_table.LegacyPhasingRateColumn
LegacyPrephasingRateColumn = _py_interop_table.LegacyPrephasingRateColumn
ErrorRateColumn = _py_interop_table.ErrorRateColumn
PercentGreaterThanQ20Column = _py_interop_table.PercentGreaterThanQ20Column
PercentGreaterThanQ30Column = _py_interop_table.PercentGreaterThanQ30Column
P90Column = _py_interop_table.P90Column
PercentNoCallsColumn = _py_interop_table.PercentNoCallsColumn
PercentBaseColumn = _py_interop_table.PercentBaseColumn
FwhmColumn = _py_interop_table.FwhmColumn
CorrectedColumn = _py_interop_table.CorrectedColumn
CalledColumn = _py_interop_table.CalledColumn
SignalToNoiseColumn = _py_interop_table.SignalToNoiseColumn
PhasingWeightColumn = _py_interop_table.PhasingWeightColumn
PrephasingWeightColumn = _py_interop_table.PrephasingWeightColumn
PhasingSlopeColumn = _py_interop_table.PhasingSlopeColumn
PhasingOffsetColumn = _py_interop_table.PhasingOffsetColumn
PrephasingSlopeColumn = _py_interop_table.PrephasingSlopeColumn
PrephasingOffsetColumn = _py_interop_table.PrephasingOffsetColumn
MinimumContrastColumn = _py_interop_table.MinimumContrastColumn
MaximumContrastColumn = _py_interop_table.MaximumContrastColumn
SurfaceColumn = _py_interop_table.SurfaceColumn
SwathColumn = _py_interop_table.SwathColumn
SectionColumn = _py_interop_table.SectionColumn
TileNumberColumn = _py_interop_table.TileNumberColumn
ClusterCountOccupiedKColumn = _py_interop_table.ClusterCountOccupiedKColumn
PercentOccupiedColumn = _py_interop_table.PercentOccupiedColumn
ImagingColumnCount = _py_interop_table.ImagingColumnCount
UnknownColumnId = _py_interop_table.UnknownColumnId
class imaging_column(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_interop_table.imaging_column_swiginit(self, _py_interop_table.new_imaging_column(*args))

    def name(self):
        return _py_interop_table.imaging_column_name(self)

    def has_children(self):
        return _py_interop_table.imaging_column_has_children(self)

    def subcolumns(self):
        return _py_interop_table.imaging_column_subcolumns(self)

    def full_name(self, sub_index):
        return _py_interop_table.imaging_column_full_name(self, sub_index)

    def offset(self, *args):
        return _py_interop_table.imaging_column_offset(self, *args)

    def id(self, *args):
        return _py_interop_table.imaging_column_id(self, *args)

    def parse_header_for_id(self, header):
        return _py_interop_table.imaging_column_parse_header_for_id(self, header)

    def size(self):
        return _py_interop_table.imaging_column_size(self)

    def column_count(self):
        return _py_interop_table.imaging_column_column_count(self)

    @staticmethod
    def to_header(*args):
        return _py_interop_table.imaging_column_to_header(*args)

    @staticmethod
    def to_name(*args):
        return _py_interop_table.imaging_column_to_name(*args)
    __swig_destroy__ = _py_interop_table.delete_imaging_column

# Register imaging_column in _py_interop_table:
_py_interop_table.imaging_column_swigregister(imaging_column)

def imaging_column_to_header(*args):
    return _py_interop_table.imaging_column_to_header(*args)

def imaging_column_to_name(*args):
    return _py_interop_table.imaging_column_to_name(*args)

class imaging_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _py_interop_table.imaging_table_swiginit(self, _py_interop_table.new_imaging_table())

    def set_data(self, rows, cols, data):
        return _py_interop_table.imaging_table_set_data(self, rows, cols, data)

    def at(self, r, c, subcol=0):
        return _py_interop_table.imaging_table_at(self, r, c, subcol)

    def columns(self):
        return _py_interop_table.imaging_table_columns(self)

    def empty(self):
        return _py_interop_table.imaging_table_empty(self)

    def clear(self):
        return _py_interop_table.imaging_table_clear(self)

    def column_at(self, col_index):
        return _py_interop_table.imaging_table_column_at(self, col_index)

    def column_count(self):
        return _py_interop_table.imaging_table_column_count(self)

    def total_column_count(self):
        return _py_interop_table.imaging_table_total_column_count(self)

    def row_count(self):
        return _py_interop_table.imaging_table_row_count(self)
    __swig_destroy__ = _py_interop_table.delete_imaging_table

# Register imaging_table in _py_interop_table:
_py_interop_table.imaging_table_swigregister(imaging_table)

class imaging_table_id_less(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, table):
        _py_interop_table.imaging_table_id_less_swiginit(self, _py_interop_table.new_imaging_table_id_less(table))
    __swig_destroy__ = _py_interop_table.delete_imaging_table_id_less

# Register imaging_table_id_less in _py_interop_table:
_py_interop_table.imaging_table_id_less_swigregister(imaging_table_id_less)

class invalid_column_type(interop.py_interop_run.base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_table.invalid_column_type_swiginit(self, _py_interop_table.new_invalid_column_type(mesg))

    def __str__(self):
        return _py_interop_table.invalid_column_type___str__(self)
    __swig_destroy__ = _py_interop_table.delete_invalid_column_type

# Register invalid_column_type in _py_interop_table:
_py_interop_table.invalid_column_type_swigregister(invalid_column_type)

class imaging_column_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_table.imaging_column_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_table.imaging_column_vector___bool__(self)

    def __len__(self):
        return _py_interop_table.imaging_column_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_table.imaging_column_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_table.imaging_column_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_table.imaging_column_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_table.imaging_column_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_table.imaging_column_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_table.imaging_column_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_table.imaging_column_vector_pop(self)

    def append(self, x):
        return _py_interop_table.imaging_column_vector_append(self, x)

    def empty(self):
        return _py_interop_table.imaging_column_vector_empty(self)

    def size(self):
        return _py_interop_table.imaging_column_vector_size(self)

    def swap(self, v):
        return _py_interop_table.imaging_column_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_table.imaging_column_vector_rbegin(self)

    def rend(self):
        return _py_interop_table.imaging_column_vector_rend(self)

    def clear(self):
        return _py_interop_table.imaging_column_vector_clear(self)

    def get_allocator(self):
        return _py_interop_table.imaging_column_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_table.imaging_column_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_table.imaging_column_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_table.imaging_column_vector_swiginit(self, _py_interop_table.new_imaging_column_vector(*args))

    def push_back(self, x):
        return _py_interop_table.imaging_column_vector_push_back(self, x)

    def front(self):
        return _py_interop_table.imaging_column_vector_front(self)

    def back(self):
        return _py_interop_table.imaging_column_vector_back(self)

    def assign(self, n, x):
        return _py_interop_table.imaging_column_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_table.imaging_column_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_table.imaging_column_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_table.imaging_column_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_table.imaging_column_vector_capacity(self)
    __swig_destroy__ = _py_interop_table.delete_imaging_column_vector

# Register imaging_column_vector in _py_interop_table:
_py_interop_table.imaging_column_vector_swigregister(imaging_column_vector)


def populate_imaging_table_data(metrics, columns, row_offset, data_beg):
    return _py_interop_table.populate_imaging_table_data(metrics, columns, row_offset, data_beg)

def count_table_rows(metrics, row_offset):
    return _py_interop_table.count_table_rows(metrics, row_offset)

def count_table_columns(columns):
    return _py_interop_table.count_table_columns(columns)

def create_imaging_table(metrics, table):
    return _py_interop_table.create_imaging_table(metrics, table)

def list_imaging_table_metrics_to_load(valid_to_load):
    return _py_interop_table.list_imaging_table_metrics_to_load(valid_to_load)

def max_digits():
    return _py_interop_table.max_digits()

def get_column_rounding(index):
    return _py_interop_table.get_column_rounding(index)

def populate_column_offsets(columns):
    return _py_interop_table.populate_column_offsets(columns)

def create_imaging_table_columns(*args):
    return _py_interop_table.create_imaging_table_columns(*args)

def list_column_id(vec, skip=0):
    return _py_interop_table.list_column_id(vec, skip)

def parse_column_id(name):
    return _py_interop_table.parse_column_id(name)

def to_string_column_id(value):
    return _py_interop_table.to_string_column_id(value)


