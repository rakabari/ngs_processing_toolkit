# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_interop_run
else:
    import _py_interop_run

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_interop_run.delete_SwigPyIterator

    def value(self):
        return _py_interop_run.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_interop_run.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_interop_run.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_interop_run.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_interop_run.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_interop_run.SwigPyIterator_copy(self)

    def next(self):
        return _py_interop_run.SwigPyIterator_next(self)

    def __next__(self):
        return _py_interop_run.SwigPyIterator___next__(self)

    def previous(self):
        return _py_interop_run.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_interop_run.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_interop_run.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_interop_run.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_interop_run.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_interop_run.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_interop_run.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_interop_run.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py_interop_run:
_py_interop_run.SwigPyIterator_swigregister(SwigPyIterator)

class base_exception(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.base_exception_swiginit(self, _py_interop_run.new_base_exception(mesg))

    def __str__(self):
        return _py_interop_run.base_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_base_exception

# Register base_exception in _py_interop_run:
_py_interop_run.base_exception_swigregister(base_exception)

class xml_format_exception(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.xml_format_exception_swiginit(self, _py_interop_run.new_xml_format_exception(mesg))

    def __str__(self):
        return _py_interop_run.xml_format_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_xml_format_exception

# Register xml_format_exception in _py_interop_run:
_py_interop_run.xml_format_exception_swigregister(xml_format_exception)

class xml_file_not_found_exception(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.xml_file_not_found_exception_swiginit(self, _py_interop_run.new_xml_file_not_found_exception(mesg))

    def __str__(self):
        return _py_interop_run.xml_file_not_found_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_xml_file_not_found_exception

# Register xml_file_not_found_exception in _py_interop_run:
_py_interop_run.xml_file_not_found_exception_swigregister(xml_file_not_found_exception)

class xml_parse_exception(xml_format_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.xml_parse_exception_swiginit(self, _py_interop_run.new_xml_parse_exception(mesg))

    def __str__(self):
        return _py_interop_run.xml_parse_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_xml_parse_exception

# Register xml_parse_exception in _py_interop_run:
_py_interop_run.xml_parse_exception_swigregister(xml_parse_exception)

class bad_xml_format_exception(xml_format_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.bad_xml_format_exception_swiginit(self, _py_interop_run.new_bad_xml_format_exception(mesg))

    def __str__(self):
        return _py_interop_run.bad_xml_format_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_bad_xml_format_exception

# Register bad_xml_format_exception in _py_interop_run:
_py_interop_run.bad_xml_format_exception_swigregister(bad_xml_format_exception)

class empty_xml_format_exception(xml_format_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.empty_xml_format_exception_swiginit(self, _py_interop_run.new_empty_xml_format_exception(mesg))

    def __str__(self):
        return _py_interop_run.empty_xml_format_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_empty_xml_format_exception

# Register empty_xml_format_exception in _py_interop_run:
_py_interop_run.empty_xml_format_exception_swigregister(empty_xml_format_exception)

class missing_xml_element_exception(xml_format_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.missing_xml_element_exception_swiginit(self, _py_interop_run.new_missing_xml_element_exception(mesg))

    def __str__(self):
        return _py_interop_run.missing_xml_element_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_missing_xml_element_exception

# Register missing_xml_element_exception in _py_interop_run:
_py_interop_run.missing_xml_element_exception_swigregister(missing_xml_element_exception)

class invalid_read_exception(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.invalid_read_exception_swiginit(self, _py_interop_run.new_invalid_read_exception(mesg))

    def __str__(self):
        return _py_interop_run.invalid_read_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_invalid_read_exception

# Register invalid_read_exception in _py_interop_run:
_py_interop_run.invalid_read_exception_swigregister(invalid_read_exception)

class invalid_tile_naming_method(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.invalid_tile_naming_method_swiginit(self, _py_interop_run.new_invalid_tile_naming_method(mesg))

    def __str__(self):
        return _py_interop_run.invalid_tile_naming_method___str__(self)
    __swig_destroy__ = _py_interop_run.delete_invalid_tile_naming_method

# Register invalid_tile_naming_method in _py_interop_run:
_py_interop_run.invalid_tile_naming_method_swigregister(invalid_tile_naming_method)

class invalid_run_info_exception(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.invalid_run_info_exception_swiginit(self, _py_interop_run.new_invalid_run_info_exception(mesg))

    def __str__(self):
        return _py_interop_run.invalid_run_info_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_invalid_run_info_exception

# Register invalid_run_info_exception in _py_interop_run:
_py_interop_run.invalid_run_info_exception_swigregister(invalid_run_info_exception)

class invalid_tile_list_exception(invalid_run_info_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.invalid_tile_list_exception_swiginit(self, _py_interop_run.new_invalid_tile_list_exception(mesg))

    def __str__(self):
        return _py_interop_run.invalid_tile_list_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_invalid_tile_list_exception

# Register invalid_tile_list_exception in _py_interop_run:
_py_interop_run.invalid_tile_list_exception_swigregister(invalid_tile_list_exception)

class invalid_run_info_cycle_exception(base_exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesg):
        _py_interop_run.invalid_run_info_cycle_exception_swiginit(self, _py_interop_run.new_invalid_run_info_cycle_exception(mesg))

    def __str__(self):
        return _py_interop_run.invalid_run_info_cycle_exception___str__(self)
    __swig_destroy__ = _py_interop_run.delete_invalid_run_info_cycle_exception

# Register invalid_run_info_cycle_exception in _py_interop_run:
_py_interop_run.invalid_run_info_cycle_exception_swigregister(invalid_run_info_cycle_exception)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.string_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.string_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.string_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.string_vector_pop(self)

    def append(self, x):
        return _py_interop_run.string_vector_append(self, x)

    def empty(self):
        return _py_interop_run.string_vector_empty(self)

    def size(self):
        return _py_interop_run.string_vector_size(self)

    def swap(self, v):
        return _py_interop_run.string_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.string_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.string_vector_rend(self)

    def clear(self):
        return _py_interop_run.string_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.string_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.string_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.string_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.string_vector_swiginit(self, _py_interop_run.new_string_vector(*args))

    def push_back(self, x):
        return _py_interop_run.string_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.string_vector_front(self)

    def back(self):
        return _py_interop_run.string_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.string_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.string_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.string_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.string_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_string_vector

# Register string_vector in _py_interop_run:
_py_interop_run.string_vector_swigregister(string_vector)

class ulong_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.ulong_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.ulong_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.ulong_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.ulong_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.ulong_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.ulong_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.ulong_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.ulong_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.ulong_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.ulong_vector_pop(self)

    def append(self, x):
        return _py_interop_run.ulong_vector_append(self, x)

    def empty(self):
        return _py_interop_run.ulong_vector_empty(self)

    def size(self):
        return _py_interop_run.ulong_vector_size(self)

    def swap(self, v):
        return _py_interop_run.ulong_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.ulong_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.ulong_vector_rend(self)

    def clear(self):
        return _py_interop_run.ulong_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.ulong_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.ulong_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.ulong_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.ulong_vector_swiginit(self, _py_interop_run.new_ulong_vector(*args))

    def push_back(self, x):
        return _py_interop_run.ulong_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.ulong_vector_front(self)

    def back(self):
        return _py_interop_run.ulong_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.ulong_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.ulong_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.ulong_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.ulong_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.ulong_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_ulong_vector

# Register ulong_vector in _py_interop_run:
_py_interop_run.ulong_vector_swigregister(ulong_vector)

class ushort_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.ushort_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.ushort_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.ushort_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.ushort_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.ushort_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.ushort_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.ushort_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.ushort_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.ushort_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.ushort_vector_pop(self)

    def append(self, x):
        return _py_interop_run.ushort_vector_append(self, x)

    def empty(self):
        return _py_interop_run.ushort_vector_empty(self)

    def size(self):
        return _py_interop_run.ushort_vector_size(self)

    def swap(self, v):
        return _py_interop_run.ushort_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.ushort_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.ushort_vector_rend(self)

    def clear(self):
        return _py_interop_run.ushort_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.ushort_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.ushort_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.ushort_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.ushort_vector_swiginit(self, _py_interop_run.new_ushort_vector(*args))

    def push_back(self, x):
        return _py_interop_run.ushort_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.ushort_vector_front(self)

    def back(self):
        return _py_interop_run.ushort_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.ushort_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.ushort_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.ushort_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.ushort_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.ushort_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_ushort_vector

# Register ushort_vector in _py_interop_run:
_py_interop_run.ushort_vector_swigregister(ushort_vector)

class uint_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.uint_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.uint_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.uint_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.uint_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.uint_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.uint_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.uint_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.uint_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.uint_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.uint_vector_pop(self)

    def append(self, x):
        return _py_interop_run.uint_vector_append(self, x)

    def empty(self):
        return _py_interop_run.uint_vector_empty(self)

    def size(self):
        return _py_interop_run.uint_vector_size(self)

    def swap(self, v):
        return _py_interop_run.uint_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.uint_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.uint_vector_rend(self)

    def clear(self):
        return _py_interop_run.uint_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.uint_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.uint_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.uint_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.uint_vector_swiginit(self, _py_interop_run.new_uint_vector(*args))

    def push_back(self, x):
        return _py_interop_run.uint_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.uint_vector_front(self)

    def back(self):
        return _py_interop_run.uint_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.uint_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.uint_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.uint_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.uint_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.uint_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_uint_vector

# Register uint_vector in _py_interop_run:
_py_interop_run.uint_vector_swigregister(uint_vector)

class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.float_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.float_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.float_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.float_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.float_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.float_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.float_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.float_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.float_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.float_vector_pop(self)

    def append(self, x):
        return _py_interop_run.float_vector_append(self, x)

    def empty(self):
        return _py_interop_run.float_vector_empty(self)

    def size(self):
        return _py_interop_run.float_vector_size(self)

    def swap(self, v):
        return _py_interop_run.float_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.float_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.float_vector_rend(self)

    def clear(self):
        return _py_interop_run.float_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.float_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.float_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.float_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.float_vector_swiginit(self, _py_interop_run.new_float_vector(*args))

    def push_back(self, x):
        return _py_interop_run.float_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.float_vector_front(self)

    def back(self):
        return _py_interop_run.float_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.float_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.float_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.float_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.float_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.float_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_float_vector

# Register float_vector in _py_interop_run:
_py_interop_run.float_vector_swigregister(float_vector)

class bool_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.bool_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.bool_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.bool_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.bool_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.bool_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.bool_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.bool_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.bool_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.bool_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.bool_vector_pop(self)

    def append(self, x):
        return _py_interop_run.bool_vector_append(self, x)

    def empty(self):
        return _py_interop_run.bool_vector_empty(self)

    def size(self):
        return _py_interop_run.bool_vector_size(self)

    def swap(self, v):
        return _py_interop_run.bool_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.bool_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.bool_vector_rend(self)

    def clear(self):
        return _py_interop_run.bool_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.bool_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.bool_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.bool_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.bool_vector_swiginit(self, _py_interop_run.new_bool_vector(*args))

    def push_back(self, x):
        return _py_interop_run.bool_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.bool_vector_front(self)

    def back(self):
        return _py_interop_run.bool_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.bool_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.bool_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.bool_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.bool_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.bool_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_bool_vector

# Register bool_vector in _py_interop_run:
_py_interop_run.bool_vector_swigregister(bool_vector)

class uchar_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.uchar_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.uchar_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.uchar_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.uchar_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.uchar_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.uchar_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.uchar_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.uchar_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.uchar_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.uchar_vector_pop(self)

    def append(self, x):
        return _py_interop_run.uchar_vector_append(self, x)

    def empty(self):
        return _py_interop_run.uchar_vector_empty(self)

    def size(self):
        return _py_interop_run.uchar_vector_size(self)

    def swap(self, v):
        return _py_interop_run.uchar_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.uchar_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.uchar_vector_rend(self)

    def clear(self):
        return _py_interop_run.uchar_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.uchar_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.uchar_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.uchar_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.uchar_vector_swiginit(self, _py_interop_run.new_uchar_vector(*args))

    def push_back(self, x):
        return _py_interop_run.uchar_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.uchar_vector_front(self)

    def back(self):
        return _py_interop_run.uchar_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.uchar_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.uchar_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.uchar_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.uchar_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.uchar_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_uchar_vector

# Register uchar_vector in _py_interop_run:
_py_interop_run.uchar_vector_swigregister(uchar_vector)


def library_version():
    return _py_interop_run.library_version()
INTEROP_UNKNOWN = _py_interop_run.INTEROP_UNKNOWN
Unknown = _py_interop_run.Unknown
Intensity = _py_interop_run.Intensity
FWHM = _py_interop_run.FWHM
BasePercent = _py_interop_run.BasePercent
PercentNoCall = _py_interop_run.PercentNoCall
Q20Percent = _py_interop_run.Q20Percent
Q30Percent = _py_interop_run.Q30Percent
AccumPercentQ20 = _py_interop_run.AccumPercentQ20
AccumPercentQ30 = _py_interop_run.AccumPercentQ30
QScore = _py_interop_run.QScore
Clusters = _py_interop_run.Clusters
ClustersPF = _py_interop_run.ClustersPF
ClusterCount = _py_interop_run.ClusterCount
ClusterCountPF = _py_interop_run.ClusterCountPF
ErrorRate = _py_interop_run.ErrorRate
PercentPhasing = _py_interop_run.PercentPhasing
PercentPrephasing = _py_interop_run.PercentPrephasing
PercentAligned = _py_interop_run.PercentAligned
Phasing = _py_interop_run.Phasing
PrePhasing = _py_interop_run.PrePhasing
CorrectedIntensity = _py_interop_run.CorrectedIntensity
CalledIntensity = _py_interop_run.CalledIntensity
SignalToNoise = _py_interop_run.SignalToNoise
OccupiedCountK = _py_interop_run.OccupiedCountK
PercentOccupied = _py_interop_run.PercentOccupied
PercentPF = _py_interop_run.PercentPF
MetricTypeCount = _py_interop_run.MetricTypeCount
UnknownMetricType = _py_interop_run.UnknownMetricType
CorrectedInt = _py_interop_run.CorrectedInt
Error = _py_interop_run.Error
Extraction = _py_interop_run.Extraction
Image = _py_interop_run.Image
Index = _py_interop_run.Index
Q = _py_interop_run.Q
Tile = _py_interop_run.Tile
QByLane = _py_interop_run.QByLane
QCollapsed = _py_interop_run.QCollapsed
EmpiricalPhasing = _py_interop_run.EmpiricalPhasing
DynamicPhasing = _py_interop_run.DynamicPhasing
ExtendedTile = _py_interop_run.ExtendedTile
SummaryRun = _py_interop_run.SummaryRun
MetricCount = _py_interop_run.MetricCount
UnknownMetricGroup = _py_interop_run.UnknownMetricGroup
FourDigit = _py_interop_run.FourDigit
FiveDigit = _py_interop_run.FiveDigit
Absolute = _py_interop_run.Absolute
TileNamingMethodCount = _py_interop_run.TileNamingMethodCount
UnknownTileNamingMethod = _py_interop_run.UnknownTileNamingMethod
NC = _py_interop_run.NC
A = _py_interop_run.A
C = _py_interop_run.C
G = _py_interop_run.G
T = _py_interop_run.T
NUM_OF_BASES = _py_interop_run.NUM_OF_BASES
NUM_OF_BASES_AND_NC = _py_interop_run.NUM_OF_BASES_AND_NC
UnknownBase = _py_interop_run.UnknownBase
SentinelSurface = _py_interop_run.SentinelSurface
Top = _py_interop_run.Top
Bottom = _py_interop_run.Bottom
UnknownSurface = _py_interop_run.UnknownSurface
HiSeq = _py_interop_run.HiSeq
HiScan = _py_interop_run.HiScan
MiSeq = _py_interop_run.MiSeq
NextSeq = _py_interop_run.NextSeq
MiniSeq = _py_interop_run.MiniSeq
NovaSeq = _py_interop_run.NovaSeq
iSeq = _py_interop_run.iSeq
NextSeq1k2k = _py_interop_run.NextSeq1k2k
InstrumentCount = _py_interop_run.InstrumentCount
UnknownInstrument = _py_interop_run.UnknownInstrument
BaseTileType = _py_interop_run.BaseTileType
BaseCycleType = _py_interop_run.BaseCycleType
BaseReadType = _py_interop_run.BaseReadType
BaseLaneType = _py_interop_run.BaseLaneType
BaseRunType = _py_interop_run.BaseRunType
BaseMetricCount = _py_interop_run.BaseMetricCount
UnknownBaseType = _py_interop_run.UnknownBaseType
Red = _py_interop_run.Red
Green = _py_interop_run.Green
Blue = _py_interop_run.Blue
Black = _py_interop_run.Black
PlotColorCount = _py_interop_run.PlotColorCount
UnknownColor = _py_interop_run.UnknownColor
Centered = _py_interop_run.Centered
Shifted = _py_interop_run.Shifted
UnknownBarPlotOption = _py_interop_run.UnknownBarPlotOption
IdType = _py_interop_run.IdType
ValueType = _py_interop_run.ValueType
StructType = _py_interop_run.StructType
ChannelArray = _py_interop_run.ChannelArray
BaseArray = _py_interop_run.BaseArray
MetricDataCount = _py_interop_run.MetricDataCount
UnknownMetricData = _py_interop_run.UnknownMetricData
TileFeature = _py_interop_run.TileFeature
CycleFeature = _py_interop_run.CycleFeature
ReadFeature = _py_interop_run.ReadFeature
BaseFeature = _py_interop_run.BaseFeature
ChannelFeature = _py_interop_run.ChannelFeature
LaneFeature = _py_interop_run.LaneFeature
DiskFeature = _py_interop_run.DiskFeature
UnknownMetricFeature = _py_interop_run.UnknownMetricFeature
FlowcellPlot = _py_interop_run.FlowcellPlot
ByCyclePlot = _py_interop_run.ByCyclePlot
ByLanePlot = _py_interop_run.ByLanePlot
QHistogramPlot = _py_interop_run.QHistogramPlot
QHeatmapPlot = _py_interop_run.QHeatmapPlot
SampleQCPlot = _py_interop_run.SampleQCPlot
UnknownPlotType = _py_interop_run.UnknownPlotType
class cycle_range(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_interop_run.cycle_range_swiginit(self, _py_interop_run.new_cycle_range(*args))

    def first_cycle(self, *args):
        return _py_interop_run.cycle_range_first_cycle(self, *args)

    def last_cycle(self, *args):
        return _py_interop_run.cycle_range_last_cycle(self, *args)

    def empty(self):
        return _py_interop_run.cycle_range_empty(self)

    def update(self, *args):
        return _py_interop_run.cycle_range_update(self, *args)
    __swig_destroy__ = _py_interop_run.delete_cycle_range

# Register cycle_range in _py_interop_run:
_py_interop_run.cycle_range_swigregister(cycle_range)

def subtract(lhs, first_cycle_of_read):
    return _py_interop_run.subtract(lhs, first_cycle_of_read)

class read_info(cycle_range):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, number=0, first_cycle=0, last_cycle=0, is_index=False, is_reverse_complement=False):
        _py_interop_run.read_info_swiginit(self, _py_interop_run.new_read_info(number, first_cycle, last_cycle, is_index, is_reverse_complement))

    def number(self):
        return _py_interop_run.read_info_number(self)

    def is_index(self):
        return _py_interop_run.read_info_is_index(self)

    def is_reverse_complement(self):
        return _py_interop_run.read_info_is_reverse_complement(self)

    def total_cycles(self):
        return _py_interop_run.read_info_total_cycles(self)

    def useable_cycles(self):
        return _py_interop_run.read_info_useable_cycles(self)
    __swig_destroy__ = _py_interop_run.delete_read_info

# Register read_info in _py_interop_run:
_py_interop_run.read_info_swigregister(read_info)

class flowcell_layout(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_interop_run.flowcell_layout_swiginit(self, _py_interop_run.new_flowcell_layout(*args))

    def supports_multisurface(self):
        return _py_interop_run.flowcell_layout_supports_multisurface(self)

    def surface_list(self):
        return _py_interop_run.flowcell_layout_surface_list(self)

    def total_number_of_sections(self):
        return _py_interop_run.flowcell_layout_total_number_of_sections(self)

    def naming_method(self):
        return _py_interop_run.flowcell_layout_naming_method(self)

    def tiles(self):
        return _py_interop_run.flowcell_layout_tiles(self)

    def barcode(self):
        return _py_interop_run.flowcell_layout_barcode(self)

    def total_swaths(self, all_surfaces):
        return _py_interop_run.flowcell_layout_total_swaths(self, all_surfaces)

    def tiles_per_lane(self):
        return _py_interop_run.flowcell_layout_tiles_per_lane(self)

    def total_tiles(self):
        return _py_interop_run.flowcell_layout_total_tiles(self)

    def set_naming_method(self, naming_method):
        return _py_interop_run.flowcell_layout_set_naming_method(self, naming_method)

    def lane_count(self, *args):
        return _py_interop_run.flowcell_layout_lane_count(self, *args)

    def surface_count(self, *args):
        return _py_interop_run.flowcell_layout_surface_count(self, *args)

    def swath_count(self, *args):
        return _py_interop_run.flowcell_layout_swath_count(self, *args)

    def tile_count(self, *args):
        return _py_interop_run.flowcell_layout_tile_count(self, *args)

    def sections_per_lane(self, *args):
        return _py_interop_run.flowcell_layout_sections_per_lane(self, *args)

    def lanes_per_section(self, *args):
        return _py_interop_run.flowcell_layout_lanes_per_section(self, *args)
    __swig_destroy__ = _py_interop_run.delete_flowcell_layout

# Register flowcell_layout in _py_interop_run:
_py_interop_run.flowcell_layout_swigregister(flowcell_layout)

class image_dimensions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, width=0, height=0):
        _py_interop_run.image_dimensions_swiginit(self, _py_interop_run.new_image_dimensions(width, height))

    def width(self):
        return _py_interop_run.image_dimensions_width(self)

    def height(self):
        return _py_interop_run.image_dimensions_height(self)
    __swig_destroy__ = _py_interop_run.delete_image_dimensions

# Register image_dimensions in _py_interop_run:
_py_interop_run.image_dimensions_swigregister(image_dimensions)

class info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_interop_run.info_swiginit(self, _py_interop_run.new_info(*args))

    def validate_tiles(self):
        return _py_interop_run.info_validate_tiles(self)

    def validate(self, *args):
        return _py_interop_run.info_validate(self, *args)

    def validate_cycle(self, lane, tile, cycle, metric_name):
        return _py_interop_run.info_validate_cycle(self, lane, tile, cycle, metric_name)

    def validate_read(self, lane, tile, read, metric_name):
        return _py_interop_run.info_validate_read(self, lane, tile, read, metric_name)

    def instrument_name(self):
        return _py_interop_run.info_instrument_name(self)

    def flowcell_id(self):
        return _py_interop_run.info_flowcell_id(self)

    def run_number(self):
        return _py_interop_run.info_run_number(self)

    def name(self):
        return _py_interop_run.info_name(self)

    def date(self):
        return _py_interop_run.info_date(self)

    def version(self):
        return _py_interop_run.info_version(self)

    def dimensions_of_image(self):
        return _py_interop_run.info_dimensions_of_image(self)

    def is_indexed(self):
        return _py_interop_run.info_is_indexed(self)

    def is_paired_end(self):
        return _py_interop_run.info_is_paired_end(self)

    def is_last_cycle_of_read(self, cycle):
        return _py_interop_run.info_is_last_cycle_of_read(self, cycle)

    def cycle_within_read(self, cycle):
        return _py_interop_run.info_cycle_within_read(self, cycle)

    def read(self, *args):
        return _py_interop_run.info_read(self, *args)

    def channels(self, *args):
        return _py_interop_run.info_channels(self, *args)

    def reads(self, *args):
        return _py_interop_run.info_reads(self, *args)

    def set_naming_method(self, naming_method):
        return _py_interop_run.info_set_naming_method(self, naming_method)

    def flowcell(self, *args):
        return _py_interop_run.info_flowcell(self, *args)

    def total_cycles(self):
        return _py_interop_run.info_total_cycles(self)

    def useable_cycles(self):
        return _py_interop_run.info_useable_cycles(self)

    def read_file(self, filename):
        return _py_interop_run.info_read_file(self, filename)

    def parse(self, data):
        return _py_interop_run.info_parse(self, data)

    def write(self, filename):
        return _py_interop_run.info_write(self, filename)
    __swig_destroy__ = _py_interop_run.delete_info

# Register info in _py_interop_run:
_py_interop_run.info_swigregister(info)

class parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_interop_run.parameters_swiginit(self, _py_interop_run.new_parameters(*args))

    def instrument_type(self):
        return _py_interop_run.parameters_instrument_type(self)

    def version(self):
        return _py_interop_run.parameters_version(self)

    def read(self, run_folder):
        return _py_interop_run.parameters_read(self, run_folder)

    def read_file(self, filename):
        return _py_interop_run.parameters_read_file(self, filename)

    def parse(self, data):
        return _py_interop_run.parameters_parse(self, data)
    __swig_destroy__ = _py_interop_run.delete_parameters

# Register parameters in _py_interop_run:
_py_interop_run.parameters_swigregister(parameters)

class read_info_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_run.read_info_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_run.read_info_vector___bool__(self)

    def __len__(self):
        return _py_interop_run.read_info_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_run.read_info_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_run.read_info_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_run.read_info_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_run.read_info_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_run.read_info_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_run.read_info_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_run.read_info_vector_pop(self)

    def append(self, x):
        return _py_interop_run.read_info_vector_append(self, x)

    def empty(self):
        return _py_interop_run.read_info_vector_empty(self)

    def size(self):
        return _py_interop_run.read_info_vector_size(self)

    def swap(self, v):
        return _py_interop_run.read_info_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_run.read_info_vector_rbegin(self)

    def rend(self):
        return _py_interop_run.read_info_vector_rend(self)

    def clear(self):
        return _py_interop_run.read_info_vector_clear(self)

    def get_allocator(self):
        return _py_interop_run.read_info_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_run.read_info_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_run.read_info_vector_erase(self, *args)

    def __init__(self, *args):
        _py_interop_run.read_info_vector_swiginit(self, _py_interop_run.new_read_info_vector(*args))

    def push_back(self, x):
        return _py_interop_run.read_info_vector_push_back(self, x)

    def front(self):
        return _py_interop_run.read_info_vector_front(self)

    def back(self):
        return _py_interop_run.read_info_vector_back(self)

    def assign(self, n, x):
        return _py_interop_run.read_info_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_run.read_info_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_run.read_info_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_run.read_info_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_run.read_info_vector_capacity(self)
    __swig_destroy__ = _py_interop_run.delete_read_info_vector

# Register read_info_vector in _py_interop_run:
_py_interop_run.read_info_vector_swigregister(read_info_vector)


def list_metric_type(vec, skip=0):
    return _py_interop_run.list_metric_type(vec, skip)

def parse_metric_type(name):
    return _py_interop_run.parse_metric_type(name)

def to_string_metric_type(value):
    return _py_interop_run.to_string_metric_type(value)

def list_metric_group(vec, skip=0):
    return _py_interop_run.list_metric_group(vec, skip)

def parse_metric_group(name):
    return _py_interop_run.parse_metric_group(name)

def to_string_metric_group(value):
    return _py_interop_run.to_string_metric_group(value)

def list_tile_naming_method(vec, skip=0):
    return _py_interop_run.list_tile_naming_method(vec, skip)

def parse_tile_naming_method(name):
    return _py_interop_run.parse_tile_naming_method(name)

def to_string_tile_naming_method(value):
    return _py_interop_run.to_string_tile_naming_method(value)

def list_dna_bases(vec, skip=0):
    return _py_interop_run.list_dna_bases(vec, skip)

def parse_dna_bases(name):
    return _py_interop_run.parse_dna_bases(name)

def to_string_dna_bases(value):
    return _py_interop_run.to_string_dna_bases(value)

def list_surface_type(vec, skip=0):
    return _py_interop_run.list_surface_type(vec, skip)

def parse_surface_type(name):
    return _py_interop_run.parse_surface_type(name)

def to_string_surface_type(value):
    return _py_interop_run.to_string_surface_type(value)

def list_instrument_type(vec, skip=0):
    return _py_interop_run.list_instrument_type(vec, skip)

def parse_instrument_type(name):
    return _py_interop_run.parse_instrument_type(name)

def to_string_instrument_type(value):
    return _py_interop_run.to_string_instrument_type(value)

def list_metric_base_type(vec, skip=0):
    return _py_interop_run.list_metric_base_type(vec, skip)

def parse_metric_base_type(name):
    return _py_interop_run.parse_metric_base_type(name)

def to_string_metric_base_type(value):
    return _py_interop_run.to_string_metric_base_type(value)

def list_plot_colors(vec, skip=0):
    return _py_interop_run.list_plot_colors(vec, skip)

def parse_plot_colors(name):
    return _py_interop_run.parse_plot_colors(name)

def to_string_plot_colors(value):
    return _py_interop_run.to_string_plot_colors(value)

def list_bar_plot_options(vec, skip=0):
    return _py_interop_run.list_bar_plot_options(vec, skip)

def parse_bar_plot_options(name):
    return _py_interop_run.parse_bar_plot_options(name)

def to_string_bar_plot_options(value):
    return _py_interop_run.to_string_bar_plot_options(value)

def list_metric_data(vec, skip=0):
    return _py_interop_run.list_metric_data(vec, skip)

def parse_metric_data(name):
    return _py_interop_run.parse_metric_data(name)

def to_string_metric_data(value):
    return _py_interop_run.to_string_metric_data(value)

def list_metric_feature_type(vec, skip=0):
    return _py_interop_run.list_metric_feature_type(vec, skip)

def parse_metric_feature_type(name):
    return _py_interop_run.parse_metric_feature_type(name)

def to_string_metric_feature_type(value):
    return _py_interop_run.to_string_metric_feature_type(value)


